class Solution {
public:
    int smallestChair(vector<vector<int>>& t, int f)
    {
        int n=t.size();
        for(int i=0;i<n;i++)
        {
            t[i].push_back(i);
        }
        sort(t.begin(),t.end());
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;
        set<int>s;
        for(int i=0;i<=10000;i++)
        {
            s.insert(i);
        }
        for(int i=0;i<n;i++)
        {
            while(!pq.empty() && pq.top().first<=t[i][0])
            {
                s.insert(pq.top().second);
                pq.pop();
            }
            if(t[i][2]==f)
                return *s.begin();
            int x=*s.begin();
            s.erase(s.begin());
             pq.push({t[i][1],x});
        }
        return *s.begin();
    }
};
